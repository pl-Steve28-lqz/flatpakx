%header
  .header-content
    .header-content-inner
      %h1 the future of application distribution
      %hr
        %p Long gone are the days of trying to keep up with Linux distributions. Decouple your app from the OS Now!
        %a.btn.btn-primary.btn-xl.page-scroll{:href => "#about"} Find Out How
%section#about.bg-primary
  .container
    .row
      .col-lg-8.col-lg-offset-2.text-center
        %h2.section-heading Self-contained and future proof
        %hr.light
          %p.text-faded Distributing applications on Linux is a pain: different distributions, different versions, each with different library versions and conventions. Flatpak is here to change all that.
          %p &nbsp;
  .container
    .row
      .col-lg-4
        %h3.text-center Cross platform
        %p Flatpak allows the same app to be installed on multiple Linux distributions
      .col-lg-4
        %h3.text-center Stable
        %p With Flatpak, the same app can be installed on different distribution versions, without having to be updated
      .col-lg-4
        %h3.text-center Secure
        %p Flatpak has been designed with security at heart, and provides a sandbox for each application
        
    .row
      .col-lg-2.col-lg-offset-5
        %p &nbsp;
        /=image_tag 'img/logo.svg', :class => 'full'
        /%p &nbsp;
    .row
      .col-lg-12.text-center
        %h2 How it works
    .row
      .col-lg-4
        %h3.text-center Runtimes
        %p Runtimes contain the libraries and dependencies that you use to build your app. They are consistent across different distributions, and different runtime versions can be installed in parallel, meaning that your dependencies are always available in the form you expect.
      .col-lg-4
        %h3.text-center Bundles
        %p If you want to use a library that isn't in a runtime, Flatpak allows it to bundle it as a part of your app. It is also possible to bundle modified versions of libraries that are present in a runtime.
      .col-lg-4
        %h3.text-center Sandboxes
        %p Flatpak uses Linux technologies to isolate apps from the OS. This provides security for users, since they have limited access to files, system resources and hardware. (These features are still work in progress.)
        
        
%section#users
  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Information for users
        %hr.primary
        %p
          Flatpak builds applications on top of
          = succeed "." do
            %i runtimes
        %p
          Flatpak has many advantages for users. Applications can be safely updated
          on a running system, without fear of conflicts occuring during the update
          process. Multiple versions of the same application can be installed at
          the same time, which allows having a nightly or experimental version
          alongside a stable release. In the future, the security first approach
          of Flatpak will guarantee greater privacy and peace of mind.
        %h2 Trying Flatpak for yourself
        %p
          A collection of experimental application builds are already available
          with Flatpak, so you can try it yourself. It is currently easiest to
          use Flatpak with Fedora or Ubuntu.
        %h3 1. Install Flatpak
        %p
          Before you can install applications with Flatpak, you need to install the
          Flatpak itself. Currently this has to be done using the command line.
        %p
          With Fedora, run:
        %pre
          :preserve
            $ sudo dnf install xdg-app
        %p
          Or on Ubuntu, run:
        %pre
          :preserve
            $ sudo apt-get install xdg-app
        %h3 2. Add some repositories
        %p
          Flatpak uses remote repositories as the source for software. For this
          example we're using two repositories: one which contains GNOME apps,
          and one which contains the runtime that provides the dependencies
          they need.
        %pre
          :preserve
            $ xdg-app remote-add --user --gpg-import=gnome-sdk.gpg gnome http://sdk.gnome.org/repo/
            $ xdg-app --user remote-add --gpg-key=gnome-sdk.gpg gnome-apps http://sdk.gnome.org/repo-apps/
        %h3 3. Install the runtime
        %p
          The runtime provides the dependencies needed by the apps in the GNOME
          repository.
        %pre
          :preserve
            $ xdg-app --user install gnome org.gnome.Platform 3.20
        %h3 4. View, install and run apps
        %p
          To view the list of available apps, run:
        %pre
          :preserve
            $ xdg-app --user remote-ls gnome-apps --app
        %p
          To install:
        %pre
          :preserve
            $ xdg-app --user install gnome-apps org.gnome.gedit stable
        %p
          Installed applications should appear in the usual place. You can also run them from the command line:
        %pre
          :preserve
            $ xdg-app run org.gnome.gedit stable

%section#developers.no-padding

%aside.bg-dark
  .container
    .call-to-action


  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Developer Information
        %hr.primary
        %p
          This page is split up into 6 sections:
        %ol
          %li
            %a{:href => "#building-basic"} Building a Basic Application
          %li
            %a{:href => "#building-complex"} Building a Complex Application
          %li
            %a{:href => "#automating"}
              Automating using the
              %code xdg-app-builder
              tool
          %li
            %a{:href => "#sandbox"} The xdg-app Sandbox
          %li
            %a{:href => "#distribute"} How To Distribute a Flatpak
          %li
            %a{:href => "#appdata"} Software Center Metadata
        %a{:name => "building-basic"}
        %h2 Building a Basic Application
        %p
          This tutorial is using xdg-app 0.4.12.
          Older versions should work too, but minor things may need to be changed in the commands, and not all features may be supported.
          First of all you need to make sure
          = succeed "." do
            %a{:href => "getting.html"} xdg-app is installed
        %p
          A fundamental concept in xdg-app is the runtime/application split.
          Every app depends on a runtime, which supplies the core libraries that the app relies on.
          Runtimes are typically shared by many applications, but a user can have multiple runtimes installed at the same time.
        %p
          For this tutorial we will be using the gnome nightly build runtime.
          It is available in a xdg-app repostitory on sdk.gnome.org.
          If you tried the gnome nightly builds from my
          %a{:href => "https://blogs.gnome.org/alexl/2016/02/11/testing-unstable-gnome-using-xdg-app/"} previous blog entry
          you will have these already, but otherwise you can get it by doing:
        %pre
          :preserve
            $ wget https://people.gnome.org/~alexl/keys/nightly.gpg
            $ xdg-app --user remote-add --gpg-key=nightly.gpg gnome-nightly http://sdk.gnome.org/nightly/repo
            $ xdg-app --user install gnome-nightly org.gnome.Platform
        %p
          Once it is installed you can also update it by doing:
        %pre
          :preserve
            xdg-app --user update org.gnome.Platform
        %p
          Now we have all that we need to create a simple application.
          Lets start by writing an application.
          Put this in a file called
          = succeed ":" do
            %code hello.sh
        %pre
          :preserve
            #!/bin/sh
            echo "Hello world, from a sandbox"
        %p
          Then we need some information about the application.
          In xdg-app this is in specified in a key-value file called "metadata".
          For a simple app like this it doesn't contain much, so we can create it manually:
        %pre
          :preserve
            [Application]
            name=org.test.Hello
            runtime=org.gnome.Platform/x86_64/master
            command=hello.sh
        %p
          This specifies the application identifier (
          %em> org.test.Hello
          ) as
          well as the runtime the application uses and the command to start the app with.
        %p
          An xdg-app really doesn't require more than this, although the application
          must have a special layout.
          Using these sources we can create an application directory "appdir" like this:
        %pre
          :preserve
            mkdir appdir
            mkdir appdir/files
            mkdir appdir/files/bin
            mkdir appdir/export
            cp metadata appdir/
            cp hello.sh appdir/files/bin/
            chmod a+x appdir/files/bin/hello.sh
        %p
          In order for xdg-app to be able to install this application we need to put it
          in an  repository.
          This is done with the build-export command:
        %pre
          :preserve
              xdg-app build-export repo appdir
        %p
          This will initialize a local repository in the directory "repo" and export the app to it.
          We can test it using:
        %pre
          :preserve
            xdg-app --user remote-add --no-gpg-verify tutorial-repo repo
            xdg-app --user install tutorial-repo org.test.Hello
            xdg-app run org.test.Hello
        %p
          This will print
          = succeed "," do
            %em Hello world, from a sandbox
        %p
          If you want to examine the sandbox a bit you can use the
          %code --command=sh
          argument to xdg-app run, which will give you a shell inside the application
          sandbox where you can explore the sandbox.
          For example:
        %pre
          :preserve
            [alex@localhost ~]$ xdg-app run --command=sh org.test.Hello
            sh-4.3$ ls -lR /app
            /app:
            total 0
            drwxr-xr-x 1 alex wheel 16 jan 1 1970 bin
            /app/bin:
            total 4
            -rwxr-xr-x 2 alex wheel 45 jan 1 1970 hello.sh
            sh-4.3$ echo $PATH
            /app/bin:/usr/bin
            sh-4.3$ hello.sh
            Hello world, from a sandbox
            sh-4.3$ ls -la ~/
            total 0
            drwxr-xr-x 3 alex wheel 60 feb 19 16:11 .
            drwxr-xr-x 3 alex wheel 60 feb 19 16:11 ..
            drwxr-xr-x 3 alex wheel 60 feb 19 16:11 .var
            sh-4.3$ ls ~/.var/app/org.test.Hello/
            cache  config  data
        %p
          Here we see that all the files from the application appears in /app, and PATH points to /app/bin which means you can easily run it.
          We also see that by default the application has no access to any files from the
          users home directory (it's empty) other than the
          %code ~/.var/app/org.test.Hello
          directory where the app can store its own data.
          You can also explore
          = succeed "," do
            %code /usr
        %p
          This is a very manual approach to creating a xdg-app, and now we will look at
          how to use the
          %code xdg-app build
          command and an SDK to build applications.
        %a{:name => "building-complex"}
        %h2 Building a Complex Application
        %p
          In this part we will build a more complex application, using the basic xdg-app tools.
        %p
          We'll choose to build the gnome dictionary application, because its a small
          app with no dependencies.
          To build it we use the SDK (software development kit) that matches the runtime we used in the previous part.
          The SDK contains the development toolchain and the headers needed to build applications using the libraries in the runtime.
        %p
          First we need to install the SDK.
          This is rather large, so it may take a while:
        %pre
          :preserve
            xdg-app --user install gnome-nightly org.gnome.Sdk
        %p
          We also want the sources to the application we want to build:
        %pre
          :preserve
            wget https://download.gnome.org/sources/gnome-dictionary/3.19/gnome-dictionary-3.19.90.tar.xz
        %p
          Just like last time we start by creating the application directory where the application will be installed.
          However, this time we use the
          %em build-init
          command to create it:
        %pre
          :preserve
            xdg-app build-init appdir2 org.gnome.Dictionary org.gnome.Sdk org.gnome.Platform
        %p
          This creates a directory called "appdir2" with a metadata file and the right directory structure.
          The only difference from last time is that the metadata file specifies a sdk as well as a runtime.
          A sdk is really just a runtime, but it is used during the build phase,
          rather than when the user runs the app.
        %p
          Now that we have specified a sdk we can use the xdg-app
          %em build
          command.
          This is very similar to the
          %em run
          command, except it operates on an application build directory rather than an installed application, and it uses the sdk instead of the regular runtime.
          It also gives the sandbox access to all your files.
          For example, you can run:
        %pre
          :preserve
            $ xdg-app build appdir2 touch /app/some_file
            $ xdg-app build appdir2 ls -l /app
            total 0
            -rw-r--r-- 1 alex wheel 0 Feb 19 16:03 some_file
        %p
          This will have created a file
          %code appdir2/files/some_file
          in your tutorial directory.
        %p
          Using this command you can build the application like you normally would, except in a sandbox.
          Since it is in a sandbox it will automatically use the compiler and other tools from the sdk.
          gnome-dictionary builds fine with a traditional configure; make; make install; incantation, so we only have to add a xdg-app prefix to these:
        %pre
          :preserve
            tar xvf gnome-dictionary-3.19.90.tar.xz
            cd gnome-dictionary-3.19.90/
            xdg-app build ../appdir2 ./configure --prefix=/app
            xdg-app build ../appdir2 make
            xdg-app build ../appdir2 make install
            cd ..
        %p
          We also need to give the app access to X11 and the network, and specify the
          command that is used to start the app.
          This is done with the build-finish operation:
        %pre
          :preserve
              xdg-app build-finish appdir2 --socket=x11 --share=network --command=gnome-dictionary
        %p
          This adds some extra info to the metadata file, and creates the exports directory,
          which we'll come back to later.
          You can install and try the app by running
        %pre
          :preserve
            xdg-app build-export repo appdir2
            xdg-app --user install tutorial-repo org.gnome.Dictionary
            xdg-app run org.gnome.Dictionary
        %p
          You will see some warnings because we didn't grant the app access to the dconf
          database, but other than that everything works.
        %p
          On interesting new thing here is the exports mentioned above.
          If you look into the appdir2/export/ directory you will find this structure:
        %pre
          :preserve
            appdir2/export
            └── share
                ├── applications
                │   └── org.gnome.Dictionary.desktop
                └── dbus-1
                    └── services
                        └── org.gnome.Dictionary.service
        %p
          And when the app is installed, these files will be exported into ~/.local/share/xdg-app/exports/.
          The xdg-app package then sets the
          %code XDG_DATA_DIRS
          environment variable to point to this directory, which means your desktop environment will look in it.
          This sounds a bit complicated, but what it means is that once the app is
          installed it will automatically appear among the normal applications in your desktop environment.
        %p
          There is one limit on what gets exported though.
          All the filesnames (not directory names) must have the application id as a prefix.
          This works in the above setup because the desktop file is org.gnome.Dictionary.desktop, which is what we used for the id.
          This limitation guarantees that applications cannot cause conflicts, and that they can't override any system installed applications.
        %p
          We have now built a simple application with no dependencies.
          If there are any dependencies that are not in the runtime you need to build those too.
          This means more cycles of configure; make; make install; While this is not hard, it is a lot of manual repeated work.
        %a{:name => "automating"}
        %h2
          Automating using the
          %code xdg-app-builder
          tool
        %p
          However, if you look closely at the commands we used you will set not much what we did was specific to this application.
          In fact, the only things related to gnome-dictionary are the:
        %ul
          %li Application id
          %li Source url
          %li Binary name
          %li Necessary permissions
        %p
          It turns out that most open source applications are built in very similar ways.
          One can even consider this an
          %a{:href => "https://github.com/cgwalters/build-api"} API
          for building modules.
          And if some module does not conform to this API, then it is easy to change the upstream to conform, or if upstream is not interested, apply a local patch.
        %p
          The xdg-app-builder tool that ships with xdg-app is based on this idea.
          You describe your application, and the modules you want to build into it, and then xdg-app-builder takes care of calling the lower-level xdg-app build commands for you.
        %p
          The equivalent of what we did in part 2 is this json:
        %pre
          :preserve
            {
              "app-id": "org.gnome.Dictionary",
              "runtime": "org.gnome.Platform",
              "runtime-version": "master",
              "sdk": "org.gnome.Sdk",
              "command": "gnome-dictionary",
              "finish-args": [
                 "--socket=x11",
                 "--share=network"
              ],
              "modules": [
                {
                  "name": "gnome-dictionary",
                  "sources": [
                    {
                      "type": "archive",
                      "url": "https://download.gnome.org/sources/gnome-dictionary/3.19/gnome-dictionary-3.19.90.tar.xz",
                      "sha256": "c719333d77b8c1dffc46baab2402bad565bd949440b5b625d758047a98493418"
                    }
                  ]
                }
              ]
            }
        %p
          If you put this in a file called
          %code org.gnome.Dictionary.json
          you can =
          build and export the app using:
        %pre
          :preserve
            $ xdg-app-builder --repo=repo appdir3 org.gnome.Dictionary.json
        %p
          And to test this you use:
        %pre
          :preserve
            $ xdg-app --user update org.gnome.Dictionary
            $ xdg-app run org.gnome.Dictionary
        %p
          So the above commands downloaded the files, initialized the build dir, built the modules, finished the app and exported it to the repo.
          Just like we did before.
        %p
          However, even for this simple file it did a lot of other nice things too.
        %p
        %ul
          %li It verified the sha256 checksum of the downloaded tarball
          %li It built all sources in a fixed location (in /run/build) to ensure more repeatable builds.
          %li
            It ran the builds without access to any part of the host filesystem, other than the directory with the extracted sources.
            This means less chance of the build machine details affecting the build.
          %li It automatically extracted all the debug information from the installed binaries into separate files, and these were commited to a separately installable runtime called org.gnome.Dictionary.Debug.
          %li
            Translations were also extracted to separately installable runtimes called
            %code
              org.gnome.Dictionary.Locale.
              %em $lang
          %li It cached each stage of the build, so that if you need to rebuild the app only the modules that have changed will be rebuilt.
        %p
          Other than this xdg-app-builder has a lot of useful features.
          The obvious one is that you can build multiple modules into the application, and you can have multiple sources for each module.
          Sources can be of several types.
          Currently it supports: archive (.tar, .zip), git, bzr, patch files, and just running shell commands.
        %p
          There is also a cleanup phase that happens after the build.
          This phase lets you remove things that was added during the build, that will not be needed during runtime.
          For instance, you can remove headers, development docs and similar things here.
          xdg-app-builder supports two properties for this.
          First a list of filename patterns, and secondly a list of commands to run during the cleanup phase.
        %pre
          :preserve
            "cleanup": [ "/include", "/bin/foo-*", "*.a" ]
            "cleanup-commands": [ "sed s/foo/bar/ /bin/app.sh" ]
        %p
          Additionally, the cleanup property can be set on a per-module basis, and will
          then only match filenames that were created by that particular module.
        %p
          Another special feature is the
          = succeed "," do
            %em rename-icon
          %em rename-desktop-file
          and re
          %em name-appdata
          properties which lets you rename these kinds of files to match the application id.
          You have to do this because upstream files don't use the application id in the name, which is not allowed by xdg-app during export.
        %p
          The nightly build of the gnome applications all are built using xdg-app-builder, and you can get a lot of example json files
          %a{:href => "https://github.com/alexlarsson/gnome-apps-nightly"} there,
          for instance a complete version of
          = succeed "." do
            %a{:href => "https://github.com/alexlarsson/gnome-apps-nightly/blob/master/org.gnome.Dictionary.json"} gnome-dictionary built from git
          = succeed "." do
            %a{:href => "https://github.com/alexlarsson/nightly-build-apps"} here
        %p
          For detailed documentations on all xdg-app-builder properties.
          See the man page for xdg-app builder.
        %a{:name => "sandbox"}
        %h2 The xdg-app Sandbox
        %p
          In the first section we created a very small application.
          All it did was print to stdout and would be very easy to sandbox.
          In fact, since we didn't specify any permissions for it this application already runs in a very tight sandbox.
        %p
          Here is what the sandbox does:
        %ul
          %li No access to any host files except the runtime, the app, and ~/.var/app/org.test.Hello,  and only the last of these  is writable.
          %li /tmp is unique to the application instance.
          %li setuid functionallity is disabled.
          %li
            Processes are in a cgroup which they cannot get out of.
            This lets you know what application a process is running in, in an unfakable way.
            (This will be very important later for per-application preferences.)
          %li No access to the network.
          %li No access to any device nodes (apart from /dev/null, etc).
          %li Can't see any processes outside the sandbox.
          %li
            A set of seccomp rules are loaded that limits what syscalls the app can do.
            For instance, it can't use nonstandard network socket types, or ptrace other processes.
          %li Limited access to the session dbus instance, is only allowed  to own its own name on the bus and can't talk to anyone else.
          %li No access to host services like X, system dbus, or pulseaudio.
        %p
          Of course, its very easy to secure a Hello world program, as it doesn't need to do anything.
          There are designs (and experimental code) to allow applications to securely break out of the sandbox (using something called
          = succeed ")." do
            %em Portals
        %p
          We saw this already where we used this command, granting X11 and network access:
        %pre
          :preserve
              xdg-app build-finish appdir2 --socket=x11 --share=network --command=gnome-dictionary
        %p
          These arguments translate to these properties in the application metadata file:
        %pre
          :preserve
            [Application]
            name=org.gnome.Dictionary
            runtime=org.gnome.Platform/x86_64/master
            sdk=org.gnome.Sdk/x86_64/master
            command=gnome-dictionary
            
            [Context]
            shared=network;
            sockets=x11;
        %p
          As we gave no access to the filesystem in the above the resulting app can't see your files.
          We can verify this with a command like:
        %pre
          :preserve
            $ xdg-app run --command=ls org.gnome.Dictionary ~/
            <nothing>
        %p
          The permissions in the metadata file are only the default values though.
          You can override these in different ways.
          First of all, xdg-app run takes the same command line arguments as build-finish, which can override permissions for that instance.
          For example, this will let it see your home directory:
        %pre
          :preserve
            $ xdg-app run --filesystem=home --command=ls org.gnome.Dictionary ~/
            <homedir listing...>
        %p
          You can also permanently override permissions for an application:
        %pre
          :preserve
            $ xdg-app --user override --filesystem=home org.gnome.Dictionary
            $ xdg-app run --command=ls org.gnome.Dictionary ~/
            <homedir listing...>
        %p
          This can then again be overridden in a specific instance:
        %pre
          :preserve
            $ xdg-app run --nofilesystem=home --command=ls org.gnome.Dictionary ~/
            <nothing>
        There are quite a few options that control sandbox permissions.
        So, I'm going to list some useful examples of what can be done.
        (Note that all options have a negative version too, i.e.
        \--unshare undoes --share.)
        %p
          Grant access to some of your files:
        %pre
          :preserve
              --filesystem=host    # All files
              --filesystem=home    # Your homedirectory
              --filesystem=home:ro # Your homedirectory, read-only
              --filesystem=/some/dir --filesystem=~/other/dir # paths
              --filesystem=xdg-download # The XDG Download directory
              --nofilesystem=...
              # Undo some of the above
        %p
          Allow the application to show windows using X11:
        %pre
          :preserve
            --socket=x11 --share=ipc
        %p
          %em
            Note: --share=ipc means that the sandbox shares ipc namespace with the host.
            This is not necessarily required, but without it the X shared memory extension will not work, which is very bad for X performance.
        %p
          Allow OpenGL rendering:
        %pre
          :preserve
            --device=dri
        Allow the application to show windows using wayland:
        %pre
          :preserve
            --socket=wayland
        Let the application play sounds using pulseaudio:
        %pre
          :preserve
            --socket=pulseaudio
        %p
          Let the application access the network:
        %pre
          :preserve
             --share=network
        %p
          %em
            Note: Giving network access also grants access to all host services listening on abstract unix sockets (due to how network namespaces work), and these have no permission checks.
            This unfortunately affects e.g.
            the X server and the session bus which listens to abstract sockets by default.
            A secure distribution should disable these and just use regular sockets.
        %p
          Let the application talk to a named service on the session bus:
        %pre
          :preserve
            --talk-name=org.freedesktop.secrets
        %p
          Let the application talk to a named service on the system bus:
        %pre
          :preserve
             --system-talk-name=org.freedesktop.GeoClue2
        %p
          Give the application unlimited access to all of dbus:
        %pre
          :preserve
             --socket=system-bus --socket=session-bus
        %a{:name => "distribute"}
        %h2 How To Distribute a Flatpak
        %p
          Now we will look into how this application can be distributed to your users.
        %p
          First we need to talk a bit about
          %a{:href => "https://ostree.readthedocs.org/en/latest/"} OSTree.
          This is the core distribution and installation mechanism of xdg-app.
          OSTree is similar to git, but has been designed to handle trees of large binaries.
          Just like git it has the concept of repositories, commits and branches (refs) .
          Branches are names which points to a commit id, and an application stored in
          a repository is such a branch.
        %p
          On your machine there is a local OSTree repository which has a bunch of "remotes" configured.
          When you install or update an application from one on these remotes, what
          happens is that we
          %code ostree pull
          the branch from the remote,
          then do a local checkout of the branch (with hard links back to the repository
          files, so this is cheap).
        %p
          The OSTree repositories created by
          %code xdg-app build-export
          are of a
          type (called
          = succeed ")" do
            %em archive-z2
        %p
          There are however some extra details you have to be aware off:
        %p
          First of all, the format of the
          = succeed "repositories" do
            %em archive-z2
          %a{:href => "https://en.wikipedia.org/wiki/HTTP_persistent_connection"} HTTP keep-alive
          in your webserver.
        %p
          OSTree also supports something called
          = succeed "." do
            %em static deltas
        %p
          xdg-app has the
          %code build-update-repo
          command that is very useful to manage repositories.
          Starting at version 0.4.13 it supports
          %code --generate-static-deltas
          to generate the deltas.
          but it also has several other features that are useful.
          For instance, you can use:
        %pre
          :preserve
            xdg-app build-update-repo --title="Nice name" repo
        %p
          To set a user readable name for the repository, which will be used by default #
          in the UI when users see this repository.
        %p
          It also lets you prune (
          %code> --prune
          ) unused objects and deltas from the
          repository, and even remove older revisions from your repository (
          %code> --prune-depth
          )
          which is useful for things like automatic nightly build repositories.
        %p
          Another thing
          %code build-update-repo
          does is appstream extraction.
          It scans all the branches in the repository and looks for an
          %a{:href => "https://www.freedesktop.org/wiki/Distributions/AppStream/"} AppStream
          xml file.
          For instance, the dictionary app from
          = succeed "contains" do
            %a{:href => "https://blogs.gnome.org/alexl/2016/02/22/building-an-xdg-app-part-3/"} part 3
          = succeed "." do
            %code files/share/app-info/xmls/org.gnome.Dictionary.xml.gz
        %pre
          :preserve
            xdg-app --user update --appstream nightly
        %p
          This is used by graphical installation tools such as
          = succeed "," do
            %a{:href => "https://blogs.gnome.org/alexl/2016/02/11/testing-unstable-gnome-using-xdg-app/"} gnome-software
        %p
          %em
            Note: xdg-app-builder automatically runs the appstream-compose command after the build.
            This will collect information from appdata files and desktop files and create the right xml.gz and icon files.
            This is where the xml in gnome-dictionary came from.
        %p
          Another important part about app distribution is gpg signatures.
          By default OSTree refuses to pull anything from a remote repository that is not signed.
          This is only allowed if you use
          %code --no-gpg-verify
          when you add the remote (or you can change it with
          = succeed ")." do
            %code xdg-app remote-modify
        %p
          In OSTree, signatures are on each commit and on the summary file that lists all
          the branches in the repositories.
          These objects are created by the
          = succeed "," do
            %code build-update-repo
          %code build-export
          commands, as well as indirectly by
          = succeed "." do
            %code xdg-app-builder
        %pre
          :preserve
            xdg-app build-export --gpg-sign=KEYID --gpg-homedir=/some/dir appdir repo
        %a{:name => "appdata"}
        %h2 Software Center Metadata
        %p
          %a{:href => "appdata.html"} AppData
          is an additional XML file shipped by upstream
          projects to provide metadata for a software center.
          Without an AppData file the application will not be visible in
          software center applications like GNOME Software.
        %p
          The
          %a{:href => "oars.html"} Open Age Ratings Specification
          allows free and
          commercial software to generate the OARS markup required in the AppData file.
          OARS relies on honest answers from upstream projects and is purely
          informational.
          The OARS markup allows the end user to choose software based on some
          common criteria in the software center.
          
%section#contributions
  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Contributions
        %hr.primary
        %p
          Flatpak is a project made up of contributions from hundreds of users.
          For more information there is a
          = succeed "." do
            %a{:href => "http://lists.freedesktop.org/mailman/listinfo/xdg-app"} mailing list
          = succeed "." do
            %a{:href => "https://bugs.freedesktop.org/enter_bug.cgi?product=xdg-app"} bugzilla
          
        %pre
          :preserve
            git clone https://github.com/alexlarsson/xdg-app.git
          
        %h2 Releases
        %p
          See
          %a{:href => "http://www.freedesktop.org/software/xdg-app/releases"} here
          for tarballs.
          Please note, the old name of Flatpak was xdg-app.
